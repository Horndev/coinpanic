@model CoinpanicLib.Models.CoinClaim

@{
    ViewBag.Title = "Claim Confirm";
}

<div class="card">
    <h3 class="card-header">Confirm and Sign @Model.CoinShortName Claim</h3>
    <div class="card-body">
        <p>
            <b>@(Model.Deposited * ViewBag.Multiplier) @Model.CoinShortName</b> will be deposited in your address <b>@Model.DepositAddress</b>
        </p>
        <table class="table table-bordered table-responsive table-hover">
            <tr>
                <th>Total @Model.CoinShortName (@Model.CoinShortName)</th>
                <th>You Receive (@Model.CoinShortName)</th>
                <th>Service Fee (@Model.CoinShortName) *</th>
                <th>Miner Fee (@Model.CoinShortName)</th>
            </tr>
            <tr>
                <td>
                    @(Model.TotalValue * ViewBag.Multiplier)
                </td>
                <td>
                    @(Model.Deposited * ViewBag.Multiplier)
                </td>
                <td>
                    @(Model.MyFee * ViewBag.Multiplier) (5%)
                </td>
                <td>
                    @(Model.MinerFee * ViewBag.Multiplier)
                </td>
            </tr>
        </table>
    </div>
</div>
<div class="card">
    <h3 class="card-header">Signing Instructions</h3>
    <div class="card-body">
        <p> You must now sign the transaction using your private keys.  This can be done offline for maximum securty.</p>

        <ul class="list-group">
            <li class="list-group-item justify-content-between">
                1: <a href="~/Tools/CoinpanicSignTx.exe" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-windows"></span> Windows</a>
                <a href="~/Tools/CoinPanicSign.tar.gz" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-linux" aria-hidden="true"></span> Linux</a>
                <a href="~/Tools/CoinPanicSignMac.tar.gz" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-apple" aria-hidden="true"></span> Mac</a>
                Download the offline signing tool.
                This tool implements the signing algorithms used by the various forked coins.  You can use this tool without any connection to the internet.
                <br />
                The tool is updated frequently updated to support new coins and patch bugs.  It is recommended to download the latest copy here if you have an older version.
            </li>
            <li class="list-group-item justify-content-between">
                2: <a href="DownloadClaimDataFile/?claimId=@Model.ClaimId" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-download"></span> Claim Data </a> your custom ClaimData.txt and <b>save it to the same folder you saved the signing tool.</b>
            </li>
            <li class="list-group-item justify-content-between">
                <h4>OPTION 1: Claiming using private keys</h4>
                At the command shell navigate to the folder containing CoinpanicSignTx.exe and ClaimData.txt. Run the command: <br /><kbd>CoinpanicSignTx.exe -p PRIVATEKEY1 -p PRIVATEKEY2 -p [etc.]</kbd>
                Make sure to enter each of your private keys for the claimed addresses using the -p flag. <br />
                Your private keys will start with a'K' or 'L' and be 52 characters long (base 58 encoded). For example: KxX4edUCKiXWZh8TaB7zq9Lm2RCxSy5YgJL9VkRh5JH5G3wSKzdg.
            </li>
            <li class="list-group-item justify-content-between">
                <h4>OPTION 2: Claiming using seed words (e.g. from Trezor or Ledger)</h4>
                At the command shell navigate to the folder containing CoinpanicSignTx.exe and ClaimData.txt. Run the command: <br /><kbd>CoinpanicSignTx.exe -s "put your seed words here" -d m/44'/0'/0'</kbd> <br />
                Replace m/44'/0'/0' with whatever derivation key you are using.  If you omit the derivation path, the tool will search the keyspace in the seed for your signing keys.<br />
                If you use a seed passphrase, add the flag <kbd>-sp yourpassphrasehere</kbd> to provide your passphrase.
            </li>
        </ul>
    </div>
</div>
<div class="card">
    <h3 class="card-header">Broadcast Transaction</h3>
    <div class="card-body">
        <p class="card-text">
            Once you have run CoinpanicSignTx.exe with your private keys, proceed to the step below.
        </p>
        <div class="card-text">
            <div class="form-group">
                <div class="col-sm-10">
                    <textarea type="text" name="hex" id="hex" class="form-control" style="min-width: 100%" name="hex" rows="5" cols="40" aria-describedby="pubhelp" placeholder="Paste your signed transaction here after running CoinpanicSignTx.exe.">@Model.SignedTX</textarea>
                    <small id="pubhelp" class="form-text text-muted">We will broadcast your transaction to the network.</small>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-2">
                    <input type="button" id="broadcastBtn" class="btn btn-primary" value="Broadcast">
                </div>
                <div id="spinner" class="col-sm-8 text-center fa-2x" style="display:none">
                    <div class="fa-2x" >
                        <i class="fa fa-spinner fa-pulse"></i>
                    </div>
                </div>
                <div class="col-sm-8 text-center" id="broadcastResult" style="display:none">
                    
                </div>
            </div>
        </div>
    </div>
    <div class="card-footer">
        <p class="card-text">
            <small class="text-muted">
                If your transmission was not successful, or if you have any questions, please contact claims@coinpanic.com or /u/Zelgada on Reddit.  
            </small>
        </p>
        <p class="card-text">
            <small class="text-muted">
                Please quote your ClaimId: @Model.ClaimId in your message.
            </small>
        </p>
    </div>
</div>
<br />
<div class="card">
    <h3 class="card-header">Claim Details</h3>
    <div class="card-body">
        <p><b>@Model.CoinShortName found in submitted addresses:</b></p>
        <table id="claimAddresses" class="table table-bordered table-responsive table-hover">
            <thead>
                <tr>
                    <th>Address</th>
                    <th>Amount (@Model.CoinShortName)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var d in Model.InputAddresses)
                {
                    <tr>
                        <td>
                            @d.PublicAddress
                        </td>
                        <td>
                            @(d.ClaimValue * ViewBag.Multiplier)
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <br />
    </div>
</div>

@section Styles
{
     @Styles.Render("~/bundles/datatables/css")
}
@section scripts
{
        @Scripts.Render("~/bundles/datatables")
        <script type="text/javascript">
        $(document).ready(function () {
            $('#claimAddresses').DataTable(
                {
                    "order": [[1, "desc"]],
                    "oLanguage": {
                        "sLengthMenu": "show _MENU_",
                    },
                    "lengthMenu": [[25, 50, -1], [25, 50, "All"]],
                    "searching": false,
                    "info": true,
                    "sDom": "<'row'<'col-sm-3'i>>"
                            + "<'row'<'col-sm-12'tr>>"
                            + "<'row'<'col-sm-2'l><'col-sm-10'p>>",
                }
            );
        });

        $(function () {
            $("#broadcastBtn").click(function () {
                // Disable once clicked to help prevent multiple triggers
                $("#broadcastBtn").attr("disabled", "disabled");

                var msg = '{Hex: "' + $("#hex").val() + '", ClaimId: "' + "@Model.ClaimId" + '" }';
                $("#spinner").show();
                $.ajax({
                    type: "POST",
                    url: "/Claim/Broadcast", @*https://www.metabittrader.com/" + "@Model.CoinShortName/api/tx",*@
                    data: msg,
                    //xhrFields: {
                    //    withCredentials: true
                    //},
                    //crossDomain: true,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        $("#spinner").hide();
                        $("#broadcastResult").show();
                        $('#broadcastResult').html(response.Result);
                    },
                    failure: function (response) {
                        $("#spinner").hide();
                        $("#broadcastResult").show();
                        $('#broadcastResult').html("Failure broadcasting.");
                    },
                    error: function (response) {
                        $("#spinner").hide();
                        $("#broadcastResult").show();
                        $('#broadcastResult').html("Error broadcasting.");
                    }
                });
            });
        });

        </script>
    }

    <br />
    <br />

    @*<p> Your Coinpanic.com claim identifier is <a href="#" class="badge badge-secondary">@Model.ClaimId</a>. </p>*@
