@model CoinpanicLib.Models.CoinClaim

@{
    ViewBag.Title = "ClaimConfirm";
}

<h2>Confirm and Sign @Model.CoinShortName Claim</h2>
<br />
<br />
<p> <b>@if (Model.CoinShortName == "BCX")
{
    @(Model.Deposited * 10000.0)
}
else if (Model.CoinShortName == "BCD")
{
    @(Model.Deposited * 10.0)
}
else if (Model.CoinShortName == "BTW")
{
    @(Model.Deposited * 10000.0)
}
else
{
    @(Model.Deposited * ViewBag.Multiplier)
} @Model.CoinShortName</b> will be deposited in your address <b>@Model.DepositAddress</b></p>
<br />
<div><b>@Model.CoinShortName found in submitted addresses:</b><br /></div>
<table class="table table-bordered table-responsive table-hover">
    <tr>
        <th>Address</th>
        <th>Amount (@Model.CoinShortName)</th>
    </tr>
    @foreach (var d in Model.InputAddresses)
    {
        <tr>
            <td>@d.PublicAddress</td>
            <td>
                @if (Model.CoinShortName == "BCX")
                {
                    @(d.ClaimValue * 10000.0)
                }
                else if (Model.CoinShortName == "BCD")
                {
                    @(d.ClaimValue * 10.0)
                }
                else if (Model.CoinShortName == "BTW")
                {
                    @(d.ClaimValue * 10000.0)
                }
                else
                {
                    @(d.ClaimValue * ViewBag.Multiplier)
                }
            </td>
        </tr>
    }
</table>

<table class="table table-bordered table-responsive table-hover">
    <tr>
        <th>Total @Model.CoinShortName (@Model.CoinShortName)</th>
        <th>You Receive (@Model.CoinShortName)</th>
        <th>Service Fee (@Model.CoinShortName) *</th>
        <th>Miner Fee (@Model.CoinShortName)</th>
    </tr>
    <tr>
        <td>
        @if (Model.CoinShortName == "BCX")
        {
            @(Model.TotalValue * 10000.0)
        }
        else if (Model.CoinShortName == "BCD")
        {
            @(Model.TotalValue * 10.0)
        }
        else if (Model.CoinShortName == "BTW")
        {
            @(Model.TotalValue * 10000.0)
        }
        else
        {
            @(Model.TotalValue * ViewBag.Multiplier)
        }
        </td>
        <td>
        @if (Model.CoinShortName == "BCX")
        {
            @(Model.Deposited * 10000.0)
        }
        else if (Model.CoinShortName == "BCD")
        {
            @(Model.Deposited * 10.0)
        }
        else if (Model.CoinShortName == "BTW")
        {
            @(Model.Deposited * 10000.0)
        }
        else
        {
            @(Model.Deposited * ViewBag.Multiplier)
        }
        </td>
        <td>
        @if (Model.CoinShortName == "BCX")
        {
            @(Model.MyFee * 10000.0)
        }
        else if (Model.CoinShortName == "BCD")
        {
            @(Model.MyFee * 10.0)
        }
        else if (Model.CoinShortName == "BTW")
        {
            @(Model.MyFee * 10000.0)
        }
        else
        {
            @(Model.MyFee *ViewBag.Multiplier)
        }
         (5%)</td>
        <td>
            @if (Model.CoinShortName == "BCX")
            {
                @(Model.MinerFee * 10000.0)
            }
            else if (Model.CoinShortName == "BCD")
            {
                @(Model.MinerFee * 10.0)
            }
            else if (Model.CoinShortName == "BTW")
            {
                @(Model.MinerFee * 10000.0)
            }
            else
            {
                @(Model.MinerFee*ViewBag.Multiplier)
            }
        </td>
    </tr>
</table>
<p>* Q: Why is there a fee? A: Coinpanic.com has developed a toolset which is able to generate these transactions using the specific formatting required for the forks, as well as to be able to claim from segwit accounts.  This fee ensures we can continue to develop and improve our services for future forks.</p>
<h3>Signing Instructions</h3>
<p> You must now sign the transaction on your computer using your private keys.  This can be done offline for maximum securty.</p>
<b> If you encounter any problems, or have any questions, please contact claims@coinpanic.com or /u/Zelgada on Reddit</b>
<p> </p>
<ul class="list-group">
    <li class="list-group-item justify-content-between">
        1: <a href="~/Tools/CoinpanicSignTx.exe" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-windows"></span> Windows</a> 
        <a href="~/Tools/CoinPanicSign.tar.gz" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-linux" aria-hidden="true"></span> Linux</a> 
        <a href="~/Tools/CoinPanicSignMac.tar.gz" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-apple" aria-hidden="true"></span> Mac</a> 
        Download the offline signing tool. 
        This tool implements the signing algorithms used by the various forked coins.  You can use this tool without any connection to the internet.
        <br />
        The tool is updated frequently updated to support new coins and patch bugs.  It is recommended to download the latest copy here if you have an older version.
    </li>
    <li class="list-group-item justify-content-between">
        2: <a href="DownloadClaimDataFile/?claimId=@Model.ClaimId" class="btn btn-primary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-download"></span> Claim Data </a> your custom ClaimData.txt and <b>save it to the same folder you saved the signing tool.</b>
    </li>
    <li class="list-group-item justify-content-between">
        <h4>OPTION 1: Claiming using private keys</h4>
        At the command shell navigate to the folder containing CoinpanicSignTx.exe and ClaimData.txt. Run the command: <br /><kbd>CoinpanicSignTx.exe -p PRIVATEKEY1 -p PRIVATEKEY2 -p [etc.]</kbd>
        Make sure to enter each of your private keys for the claimed addresses using the -p flag. <br />
        Your private keys will start with a'K' or 'L' and be 52 characters long (base 58 encoded). For example: KxX4edUCKiXWZh8TaB7zq9Lm2RCxSy5YgJL9VkRh5JH5G3wSKzdg.
    </li>
    <li class="list-group-item justify-content-between">
        <h4>OPTION 2: Claiming using seed words (i.e. From Trezor or Ledger)</h4>
        At the command shell navigate to the folder containing CoinpanicSignTx.exe and ClaimData.txt. Run the command: <br /><kbd>CoinpanicSignTx.exe -s "put your seed words here" -d m/44'/0'/0'</kbd> <br />
        Replace m/44'/0'/0' with whatever derivation key you are using.  If you omit the derivation path, the tool will search the keyspace in the seed for your signing keys.<br />
        If you use a seed passphrase, add the flag <kbd>-sp yourpassphrasehere</kbd> to provide your passphrase.
    </li>
    @*<li class="list-group-item justify-content-between">
        <a href="~/Tools/Claim.mp4" class="btn btn-secondary btn-sm active" role="button" aria-pressed="true"><span class="fa fa-video-camera"></span> Watch </a> A video of the process is available.*@  
        @*<p><a class="btn btn-default" href="http://www.coinpanic.com/Home/Claim">Learn more about how to obtain your private keys &raquo;</a></p>*@
    @*</li>*@
    <li class="list-group-item justify-content-between">
        Copy the resulting signed transaction, and paste it into the form below.  
        @if (Model.CoinShortName == "B2X")
        {
            <span>Alternatively, you can broadcast it on <a href="http://explorer.b2x-segwit.io/tx/send">http://explorer.b2x-segwit.io/tx/send</a></span>
        } 
    </li>
</ul>
<br />
@*<h5> Your <kbd>UNSIGNED_TRANSACTION</kbd> is (copy from here):</h5>
<p class="card-text">
    <div class="form-group">
        <div class="col-sm-10">
            <textarea type="text" class="form-control" rows="7" name="SignedTX" id="SignedTX" aria-describedby="pubhelp" placeholder="Copy your unsigned transaction from here">@Model.UnsignedTX</textarea>
        </div>
    </div>
</p>*@
<h2>Once you have run CoinpanicSignTx.exe with your private keys, proceed to the step below.</h2>

@*<form action="/Claim/TransmitTransaction" method="post">
    <input type="hidden" name="claimId" value="@Model.ClaimId" />
    <p class="card-text">
        <div class="form-group">
            <div class="col-sm-10">
                <label for="SignedTX">Paste your signed transaction here:</label>
                <textarea type="text" class="form-control" rows="5" name="signedTransaction" id="signedTransaction" aria-describedby="pubhelp" placeholder="Paste your signed transaction here after running CoinpanicSignTx.exe.  It should look different than the unsigned transaction if it was successful.">@Model.SignedTX</textarea>
                <small id="pubhelp" class="form-text text-muted">We will broadcast your transaction to the network.</small>
            </div>
        </div>
    </p>
    <div class="form-group">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Transmit</button> There are @ViewBag.NumConnectedNodes @Model.CoinShortName connected  nodes.  If there are no connected nodes, then there could be a problem with the network and your transmission may not broadcast.  Contact claims@coinpanic.com for assistance, or wait until nodes are connected before transmitting.
        </div>
    </div>
</form>*@

    <div class="card-text">
        <div class="form-group">
            <div class="col-sm-10">
                <textarea type="text" name="hex" id="hex" class="form-control" style="min-width: 100%" name="hex" rows="5" cols="40" aria-describedby="pubhelp" placeholder="Paste your signed transaction here after running CoinpanicSignTx.exe.">@Model.SignedTX</textarea>
                <small id="pubhelp" class="form-text text-muted">We will broadcast your transaction to the network.</small>
            </div>
            
        </div>
        <div class="form-group row">
            <div class="col-sm-1">
                <input type="button" id="broadcastBtn" class="btn btn-primary" value="Broadcast">
            </div>
            <div id="spinner" class="fa-3x text-center col-md-1 pull-left" style="display:none">
                <i class="fa fa-spinner fa-pulse"></i>
            </div>
            <div class="col-sm-9 text-left align-middle" id="broadcastResult">

            </div>
        </div>
        <b> If your transmission was not successful, or if you have any questions, please contact claims@coinpanic.com or /u/Zelgada on Reddit</b>
        <p>
            Please quote your ClaimId: @Model.ClaimId in your message.
        </p>
    </div>

@section scripts
{
    <script>
    $(function () {
        $("#broadcastBtn").click(function () {
            var msg = '{Hex: "' + $("#hex").val() + '",ClaimId: "' + "@Model.ClaimId" + '" }';
            $("#spinner").show();
            $.ajax({
                type: "POST",
                url: "https://www.metabittrader.com/" + "@Model.CoinShortName/api/tx",
                data: msg,
                xhrFields: {
                    withCredentials: true
                },
                crossDomain: true,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    $("#spinner").hide();
                    $('#broadcastResult').html(response.Result);
                },
                failure: function (response) {
                    $("#spinner").hide();
                    alert(response.responseText);
                },
                error: function (response) {
                    $("#spinner").hide();
                    alert(response.responseText);
                }
            });
        });
    });

    </script>
}

<br />
<br />

@*<p> Your Coinpanic.com claim identifier is <a href="#" class="badge badge-secondary">@Model.ClaimId</a>. </p>*@
