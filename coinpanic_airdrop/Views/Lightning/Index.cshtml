@model coinpanic_airdrop.Models.LnStatusViewModel
@{
    var url = string.Format(
        "/Lightning/getQr?qr={0}",
        @Uri.EscapeDataString(ViewBag.URI.ToString()));
}

<div class="card">
    <h3 class="card-header">Lightning Network node information</h3>
    <div class="card-body">
        <div>
            <h4>Node Name: @ViewBag.Alias</h4>
            <div class="pl-2 alert alert-dark" role="alert">
                <b></b>Connection URI:</b> @ViewBag.URI
            </div>
        </div>
        <div class="row justify-content-end">
            <div class="col-md-9">
                    <table class="table table-sm table-striped table-bordered">
                        <tr>
                            <td><b>Number of Channels Total</b></td>
                            <td colspan="3">@ViewBag.NumChannels</td>
                        </tr>
                        <tr>
                            <td><b>Number of Channels Online</b></td>
                            <td colspan="3">@ViewBag.NumChannelsActive</tdcolspan="3">
                        </tr>
                        <tr>
                            <td><b>Total Capacity</b></td>
                            <td>@ViewBag.Capacity BTC</td>
                            <td>@ViewBag.LocalCapacity BTC Local</td>
                            <td>@ViewBag.RemoteCapacity BTC Remote</td>
                        </tr>
                        <tr>
                            <td><b>Total Capacity Online</b></td>
                            <td>@ViewBag.ActiveCapacity BTC</td>
                            <td>@ViewBag.ActiveLocalCapacity BTC Local</td>
                            <td>@ViewBag.ActiveRemoteCapacity BTC Remote</td>
                        </tr>
                        <tr>
                            <td><b>Routed</b></td>
                            <td>@ViewBag.NumXfer payments</td>
                            <td>@ViewBag.TotalValueXfer BTC value</td>
                            <td>@ViewBag.TotalFees BTC fees</td>
                        </tr>
                    </table>
            </div>
            <div class="col-md-3 " style="padding-left: 0px;  padding-right: 0px;">
                <img src="@url" class="img-fluid" />
            </div>
        </div>
    </div>
</div>
<br />
<div class="card">
    <h3 class="card-header">Connections</h3>
    <div class="card-body">
        <table id="connectionTbl" class="table table-sm table-bordered table-responsive table-hover">
            <thead>
                <tr>
                    <th>Node Alias</th>
                    <th>Capacity</th>
                    <th>L-R</th>
                    <th>Transferred</th>
                    <th>Connection (now - past)</th>
                    <th>Channel Id</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in Model.channels)
                {
                    <tr style="@(!c.ChanInfo.active ? "background-color:LightGray" : String.Empty)">
                        <td><a href="https://1ml.com/node/@c.ChanInfo.remote_pubkey">@c.RemoteNode.Alias</a></td>
                        <td>@c.ChanInfo.capacity</td>
                        @*<td>@c.ChanInfo.local_balance</td>*@
                        <td><span id="chanbal" class="inlinebullet" style="display:none">@c.ChanInfo.remote_balance,@c.ChanInfo.capacity</span></td>
                        @*<td>@c.ChanInfo.remote_balance</td>*@
                        <td>@(Convert.ToString(Convert.ToInt64(c.ChanInfo.total_satoshis_received) + Convert.ToInt64(c.ChanInfo.total_satoshis_sent))) </td>
                        <td><span id="conn" class="inlinesparkline" style="display:none"> @(string.Join(",", c.History.Select(h => h.IsConnected ? "1" : "-1").ToList())) </span></td>
                        <td><a href="https://1ml.com/channel/@c.ChanInfo.chan_id">@c.ChanInfo.chan_id</a></td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="2" style="text-align:right"></th>
                    <th colspan="2" style="text-align:right"></th>
                    <th colspan="2"></th>
                </tr>
            </tfoot>
        </table>
        <p class="card-text"> * All units are in Satoshi.</p>
        <p class="card-text"> ** L-R indicates balance between local-remote nodes.</p>
    </div>
</div>

@section Styles
{
    @Styles.Render("~/bundles/datatables/css")
}
@section scripts
{
    @Scripts.Render("~/bundles/sparkline")
    @Scripts.Render("~/bundles/datatables")

    <script type="text/javascript">
        $(function () {
            $(".inlinesparkline").show();
            $(".inlinebullet").show();
            $('.inlinesparkline').sparkline('html', { type: 'tristate', posBarColor: 'green', negBarColor: 'red', tooltipFormat: "" });
            $('.inlinebullet').sparkline('html', { type: 'bullet', tooltipFormat: "" });
        });

        $(document).ready(function () {
            $('#connectionTbl').DataTable(
                {
                    "order": [[1, "desc"]],
                    "paging": false,
                    "footerCallback": function (row, data, start, end, display) {
                        var api = this.api(), data;

                        // Remove the formatting to get integer data for summation
                        var intVal = function (i) {
                            return typeof i === 'string' ?
                                i.replace(/[\$,]/g, '') * 1 :
                                typeof i === 'number' ?
                                    i : 0;
                        };

                        // Total over all pages
                        total = api
                            .column(1)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        // Update footer capacity
                        $(api.column(1).footer()).html(
                            total.toLocaleString() + ' capacity'
                        );

                        totalt = api
                            .column(3)
                            .data()
                            .reduce(function (a, b) {
                                return intVal(a) + intVal(b);
                            }, 0);

                        // Update footer transferred
                        $(api.column(3).footer()).html(
                            totalt.toLocaleString() + ' transferred'
                        );
                    }
                }
            );
        });
    </script>  
}